{"version":3,"sources":["assets/resume.pdf","logo.svg","util/util.js","appConstant.js","pages/MainView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","mediaMaxWidth","width","concat","colorScheme","MainView","_ref","_ref2","_ref3","_ref4","Object","core_browser_esm","css","alignItems","maxHeight","textAlign","overflow","position","zIndex","fontSize","lineHeight","color","fontWeight","marginLeft","defineProperty","fontsize","marginBottom","onClick","window","open","resume","margin","App","className","backgroundImage","Component","Boolean","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8GCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qMCI3BC,QAAgB,SAACC,GAAY,4BAAAC,OAA6BD,EAA7B,SCK7BE,EACO,UADPA,EAES,UAFTA,EAGS,UAHTA,EAIW,UAJXA,EAKO,0BCPLC,EAAA,eAAAC,EAAAC,EAAAC,EAAAC,EAAA,OACXC,OAAAC,EAAA,EAAAD,CAAA,OAAKE,IAAK,CACNC,WAAY,SACZC,UAAW,QACXC,UAAW,OACXC,SAAU,WAEVN,OAAAC,EAAA,EAAAD,CAAA,OAAKE,IAAK,CAAEK,SAAU,WAAYC,OAAQ,IAAKC,SAAU,QAASC,WAAY,OAAQC,MAAOjB,EAA8BkB,WAAY,OAAQC,WAAY,UAAW,KACtKb,OAAAC,EAAA,EAAAD,CAAA,OAAKE,KAAGN,EAAA,GAAAI,OAAAc,EAAA,EAAAd,CAAAJ,EACHL,EAAc,KAAO,CAAEC,MAAO,QAD3BQ,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,WAEM,YAFNI,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,QAEyB,OAFzBI,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,OAEsC,GAFtCI,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,QAEgD,GAFhDI,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,SAE2D,QAF3DI,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,YAE8E,QAF9EI,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,SAE8F,GAF9FA,IAGJI,OAAAC,EAAA,EAAAD,CAAA,OAAKE,KAAGL,EAAA,GAAAG,OAAAc,EAAA,EAAAd,CAAAH,EACHN,EAAc,KAAO,CAAEkB,SAAU,QAD9BT,OAAAc,EAAA,EAAAd,CAAAH,EAAA,WAEM,OAFNG,OAAAc,EAAA,EAAAd,CAAAH,EAAA,aAEyB,QAFzBG,OAAAc,EAAA,EAAAd,CAAAH,EAAA,QAEwCH,GAFxCG,IAAR,cAIAG,OAAAC,EAAA,EAAAD,CAAA,OAAKE,KAAGJ,EAAA,GAAAE,OAAAc,EAAA,EAAAd,CAAAF,EAAKP,EAAc,KAAO,CAAEkB,SAAU,QAAtCT,OAAAc,EAAA,EAAAd,CAAAF,EAAA,WACM,OADNE,OAAAc,EAAA,EAAAd,CAAAF,EAAA,aACyB,QADzBE,OAAAc,EAAA,EAAAd,CAAAF,EAAA,gBACgD,aADhDE,OAAAc,EAAA,EAAAd,CAAAF,EAAA,SACqE,UADrEA,IAAR,oBAEAE,OAAAC,EAAA,EAAAD,CAAA,OAAKE,IAAK,CAAEa,SAAU,MAAOH,WAAY,OAAQD,MAAOjB,EAAgCsB,aAAc,SAAtG,qCAEAhB,OAAAC,EAAA,EAAAD,CAAA,OACIiB,QAAS,WAAQC,OAAOC,KAAKC,MAC7BlB,KAAGH,EAAA,GAAAC,OAAAc,EAAA,EAAAd,CAAAD,EACFR,EAAc,KAAO,CAAE8B,OAAQ,SAD7BrB,OAAAc,EAAA,EAAAd,CAAAD,EAAA,WAEO,OAFPC,OAAAc,EAAA,EAAAd,CAAAD,EAAA,aAE0B,QAF1BC,OAAAc,EAAA,EAAAd,CAAAD,EAAA,QAEyCL,GAFzCM,OAAAc,EAAA,EAAAd,CAAAD,EAAA,UAE8E,aAF9EC,OAAAc,EAAA,EAAAd,CAAAD,EAAA,SAEmG,aAAaL,GAFhHM,OAAAc,EAAA,EAAAd,CAAAD,EAAA,QAEmJ,eAFnJC,OAAAc,EAAA,EAAAd,CAAAD,EAAA,SAE0K,WAF1KA,IAFP,uBCPGuB,mLARX,OACEtB,OAAAC,EAAA,EAAAD,CAAA,OAAKuB,UAAU,MAAMrB,IAAK,CAACsB,gBAAiB9B,EAA4BiB,MAAOjB,IAC7EM,OAAAC,EAAA,EAAAD,CAACL,EAAD,cAJU8B,aCGEC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.093c4016.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/resume.964d5e5d.pdf\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nexport const mediaMaxWidth = (width) => { return `@media (max-width: ${width}px)` }\n\nexport const stringWithNewLine = (str, style) => {\n    const pStyle = !!style ? style : {};\n    const strs = str.split('\\n')\n    return strs.map(item => {\n        return (\n            <p css={{ ...pStyle}}>{item}</p>); \n        })\n}","export const masterColor = '#0c1f38';\nexport const lightMasterColor = '#1c538c';\nexport const linkColor = '#7ab0f3';\nexport const lightBlue = '#acd1ff';\nexport const masterLowlightColor = '#824603';\nexport const masterHilightColor = '#ffcd40';\nexport const hilightBlueBackgroundColor = '#1c518a';\nexport const lowlightBlueBackgroundColor = '#0d253e';\n\nexport const colorScheme = {\n    primaryBgColor: '#b8d5db',\n    secondaryBgColor: '#b8d5db',\n    primaryTextColor: '#772928',\n    secondaryTextColor: '#c29491',\n    topicTextColor: '#349bb2'\n};\n\n","import React from 'react';\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\nimport { mediaMaxWidth } from '../util/util';\nimport { colorScheme } from '../appConstant';\nimport resume from '../assets/resume.pdf';\n\nexport default () => (\n    <div css={{\n        alignItems: 'center',\n        maxHeight: '100vh',\n        textAlign: 'left',\n        overflow: 'hidden'\n    }}>\n        <div css={{ position: 'absolute', zIndex: '1', fontSize: '100vh', lineHeight: '80vh', color: colorScheme.secondaryBgColor, fontWeight: 'bold', marginLeft: '-20px'}}>{'{'}</div>\n        <div css={{ \n            [mediaMaxWidth(768)]: { width: '60%' }, \n            position: 'absolute', width: '50%', left: 0, right: 0, margin: 'auto', marginTop: '25vh', zIndex: 2}}>\n            <div css={{ \n                [mediaMaxWidth(768)]: { fontSize: '2em' },\n                fontSize: '4em', fontWeight: 'bold', color: colorScheme.topicTextColor\n                }}>My name is</div>\n            <div css={{ [mediaMaxWidth(768)]: { fontSize: '3em' },\n                fontSize: '5em', fontWeight: 'bold', textTransform: 'uppercase', margin: '20px 0'}}>Pankamol Srikaew</div>\n            <div css={{ fontsize: '2em', fontWeight: 'bold', color: colorScheme.secondaryTextColor, marginBottom: '80px'}}>This is my journey as a developer</div>\n\n            <div \n                onClick={() => { window.open(resume);}}\n                css={{\n                [mediaMaxWidth(768)]: { margin: 'auto' }, \n                fontsize: '2em', fontWeight: 'bold', color: colorScheme.topicTextColor, padding: '10px 20px', border: '2px solid '+colorScheme.topicTextColor, width: 'fit-content', cursor: 'pointer'}}>\n                My Resume â†’\n            </div>\n        </div>\n        \n    </div>\n)\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainView from './pages/MainView';\nimport { colorScheme } from './appConstant';\n\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" css={{backgroundImage: colorScheme.primaryBgColor, color: colorScheme.primaryTextColor}}>\n        <MainView />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}